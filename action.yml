name: 'Sync Repository Content'
description: 'Sync content from another repository with ignore patterns and create a PR'
author: 'Your Name'

branding:
  icon: 'git-pull-request'
  color: 'blue'

inputs:
  source-repo:
    description: 'Source repository (format: owner/repo)'
    required: true
  source-branch:
    description: 'Source branch to sync from'
    required: false
    default: 'main'
  source-path:
    description: 'Source path to sync (leave empty for root)'
    required: false
    default: ''
  target-path:
    description: 'Target path in the destination repository'
    required: false
    default: ''
  ignore-patterns:
    description: 'Patterns to ignore during sync (newline-separated)'
    required: false
  pr-title:
    description: 'Pull Request title (auto-generated if not provided)'
    required: false
    default: ''
  pr-body:
    description: 'Pull Request body'
    required: false
    default: ''
  branch-prefix:
    description: 'Prefix for the sync branch'
    required: false
    default: 'sync'
  commit-message:
    description: 'Custom commit message'
    required: false
    default: ''
  github-token:
    description: 'GitHub token for authentication (needs access to both source and target repos)'
    required: true
  create-pr:
    description: 'Whether to create a pull request'
    required: false
    default: 'true'
  delete-obsolete:
    description: 'Delete files in target that dont exist in source'
    required: false
    default: 'true'

outputs:
  pr-url:
    description: 'URL of the created pull request'
    value: ${{ steps.create-pr.outputs.pr_url }}
  pr-number:
    description: 'Number of the created pull request'
    value: ${{ steps.create-pr.outputs.pr_number }}
  has-changes:
    description: 'Whether changes were detected'
    value: ${{ steps.sync.outputs.has_changes }}
  branch-name:
    description: 'Name of the created branch'
    value: ${{ steps.sync.outputs.branch_name }}

runs:
  using: 'composite'
  steps:
    - name: Checkout current repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.github-token }}

    - name: Setup Git
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Run sync script
      id: sync
      shell: bash
      env:
        SOURCE_REPO: ${{ inputs.source-repo }}
        SOURCE_BRANCH: ${{ inputs.source-branch }}
        SOURCE_PATH: ${{ inputs.source-path }}
        TARGET_PATH: ${{ inputs.target-path }}
        IGNORE_PATTERNS: ${{ inputs.ignore-patterns }}
        BRANCH_PREFIX: ${{ inputs.branch-prefix }}
        COMMIT_MESSAGE: ${{ inputs.commit-message }}
        DELETE_OBSOLETE: ${{ inputs.delete-obsolete }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        set -e
        
        # Create branch
        BRANCH_NAME="${BRANCH_PREFIX}-$(date +%Y%m%d-%H%M%S)"
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        git checkout -b $BRANCH_NAME
        
        # Clone source repository with proper authentication
        echo "Cloning source repository: $SOURCE_REPO"
        # Try with token first, fallback to public access if it fails
        if git clone --depth 10 --branch $SOURCE_BRANCH https://${GITHUB_TOKEN}@github.com/$SOURCE_REPO.git /tmp/source-repo 2>/dev/null; then
          echo "Cloned using provided token"
        else
          echo "Attempting public access..."
          git clone --depth 10 --branch $SOURCE_BRANCH https://github.com/$SOURCE_REPO.git /tmp/source-repo
        fi
        
        # Get the latest commit message from source repo
        cd /tmp/source-repo
        LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        LATEST_COMMIT_SHA=$(git log -1 --pretty=format:"%h")
        echo "latest_commit_msg=$LATEST_COMMIT_MSG" >> $GITHUB_OUTPUT
        echo "latest_commit_sha=$LATEST_COMMIT_SHA" >> $GITHUB_OUTPUT
        cd -
        
        # Prepare paths
        if [ -n "$SOURCE_PATH" ]; then
          SOURCE_DIR="/tmp/source-repo/$SOURCE_PATH"
        else
          SOURCE_DIR="/tmp/source-repo"
        fi
        
        if [ -n "$TARGET_PATH" ] && [ "$TARGET_PATH" != "." ]; then
          mkdir -p "$TARGET_PATH"
        fi
        
        # Create exclude file
        echo "$IGNORE_PATTERNS" > /tmp/rsync-exclude.txt
        
        # Prepare rsync options
        RSYNC_OPTS="-av"
        if [ "$DELETE_OBSOLETE" == "true" ]; then
          RSYNC_OPTS="$RSYNC_OPTS --delete"
        fi
        
        # Sync files
        echo "Syncing files with rsync..."
        rsync $RSYNC_OPTS \
          --exclude-from=/tmp/rsync-exclude.txt \
          "$SOURCE_DIR/" \
          "${TARGET_PATH:-.}/"
        
        # Check for changes
        if git diff --quiet && git diff --staged --quiet; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected"
          git add -A
          
          # Commit changes
          if [ -n "$COMMIT_MESSAGE" ]; then
            git commit -m "$COMMIT_MESSAGE"
          else
            git commit -m "Sync content from $SOURCE_REPO
        
        Source: https://github.com/$SOURCE_REPO
        Branch: $SOURCE_BRANCH
        Path: ${SOURCE_PATH:-root}
        
        Ignored patterns applied:
        $(echo "$IGNORE_PATTERNS" | sed 's/^/  - /')"
          fi
          
          # Push changes
          git push origin $BRANCH_NAME
        fi

    - name: Create Pull Request
      id: create-pr
      if: ${{ inputs.create-pr == 'true' && steps.sync.outputs.has_changes == 'true' }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const sourceRepo = '${{ inputs.source-repo }}';
          const sourceBranch = '${{ inputs.source-branch }}';
          const sourcePath = '${{ inputs.source-path }}' || 'root';
          const targetPath = '${{ inputs.target-path }}' || 'root';
          const latestCommitMsg = '${{ steps.sync.outputs.latest_commit_msg }}';
          const latestCommitSha = '${{ steps.sync.outputs.latest_commit_sha }}';
          
          // Extract repo name from owner/repo format
          const repoName = sourceRepo.split('/')[1];
          
          // Use custom PR title if provided, otherwise use the new format
          let prTitle = '${{ inputs.pr-title }}';
          if (!prTitle || prTitle === 'Sync content from upstream repository') {
            prTitle = `Synchronized ${repoName}: ${latestCommitMsg}`;
          }
          
          let prBody = '${{ inputs.pr-body }}';
          if (!prBody) {
            prBody = `## ðŸ“‹ Summary
          
          This PR syncs content from the upstream repository.
          
          ### Source Information
          - **Repository**: [${sourceRepo}](https://github.com/${sourceRepo})
          - **Branch**: \`${sourceBranch}\`
          - **Latest Commit**: \`${latestCommitSha}\` - ${latestCommitMsg}
          - **Source Path**: \`${sourcePath}\`
          - **Target Path**: \`${targetPath}\`
          
          ### Ignored Patterns
          The following patterns were excluded from sync:
          ${{ inputs.ignore-patterns }}.split('\n').filter(p => p.trim()).map(p => `- \`${p}\``).join('\n')}
          
          ### Changes
          Please review the changes in the Files changed tab.
          
          ---
          *This PR was automatically created by the sync-repository action.*`;
          }
          
          const pr = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: prTitle,
            body: prBody,
            head: '${{ steps.sync.outputs.branch_name }}',
            base: context.payload.repository.default_branch,
          });
          
          console.log(`Pull request created: ${pr.data.html_url}`);
          core.setOutput('pr_url', pr.data.html_url);
          core.setOutput('pr_number', pr.data.number);